$ ->
  class self.DistributionViewModel extends ObjectViewModel
    constructor: (object, readonly = false) ->
      @readonly = ko.observable(readonly)

      @distribution = ko.observable(object)
      @distribution.created = ko.observable(object.created)
      @distribution.storekeeperId = ko.observable(object.storekeeper_id)
      @distribution.storekeeperPlaceId = ko.observable(object.storekeeper_place_id)
      @distribution.foremanId = ko.observable(object.foreman_id)
      @distribution.foremanPlaceId = ko.observable(object.foreman_place_id)

      @distribution.foreman =
        tag: ko.observable(object.foreman.tag if readonly)
      @distribution.foremanPlace =
        tag: ko.observable(object.foreman_place.tag if readonly)
      @distribution.storekeeper =
        tag: ko.observable(object.storekeeper.tag if readonly)
      @distribution.storekeeperPlace =
        tag: ko.observable(object.storekeeper_place.tag if readonly)

      @availableResources = ko.observableArray([])
      @selectedResources = ko.observableArray(if readonly then object.items else [])


      @url = '/warehouses/data.json'

      @page = ko.observable()
      @per_page = ko.observable()
      @count = ko.observable()
      @range = ko.observable()

      @params =
        equal:
          storekeeper_id: @distribution.storekeeperId
          storekeeper_place_id: @distribution.storekeeperPlaceId
        page: @page
        per_page: @per_page

      @availableMode = ko.observable(0)
      @availableMode.subscribe((val) =>
        @url = "/#{if val == '0' then 'warehouses' else 'waybills'}/data.json"
        @loadAvailableResources(false))

      @loadAvailableResources() unless readonly

      $.sammy( ->
        this.get("#documents/distributions/:id/apply", ->
          ajaxRequest('GET', "/distributions/#{this.params.id}/apply"))
        this.get("#documents/distributions/:id/cancel", ->
          ajaxRequest('GET', "/distributions/#{this.params.id}/cancel"))
      )

      super

    selectResource: (resource) =>
      resource['amount'] = resource.exp_amount
      @selectedResources.push(resource)
      @getPaginateData()

    unselectResource: (resource) =>
      @selectedResources.remove(resource)
      @getPaginateData()

    save: =>
      items =[]
      for id, item of @selectedResources()
        items.push(tag: item.tag, mu: item.mu, amount: item.amount)

      params =
        object:
          created: @distribution.created
          storekeeper_id: @distribution.storekeeperId
          storekeeper_place_id: @distribution.storekeeperPlaceId
          foreman_id: @distribution.foremanId
          foreman_place_id: @distribution.foremanPlaceId
        items: items
        storekeeper: @distribution.storekeeper unless @distribution.storekeeperId()
        storekeeper_place: @distribution.storekeeperPlace unless @distribution.storekeeperPlaceId()
        foreman: @distribution.foreman unless @distribution.foremanId()
        foreman_place: @distribution.foremanPlace unless @distribution.foremanPlaceId()

      ajaxRequest('POST', '/distributions', params)

    getState: (state) ->
      switch state
        when 0 then "<%= I18n.t 'views.distributions.unknown' %>"
        when 1 then "<%= I18n.t 'views.distributions.inwork' %>"
        when 2 then "<%= I18n.t 'views.distributions.canceled' %>"
        when 3 then "<%= I18n.t 'views.distributions.applied' %>"

    loadAvailableResources: (clearSelected = true) =>
      @selectedResources([]) if clearSelected
      @availableResources([])
      if @distribution.storekeeperId() && @distribution.storekeeperPlaceId()
        @page(1)
        @getPaginateData()
      else
        @page('')
        @per_page('')
        @count(0)
        @range(@rangeGenerate())

    apply: =>
      location.hash = "#documents/distributions/#{@distribution().id}/apply"
    cancel: =>
      location.hash = "#documents/distributions/#{@distribution().id}/cancel"
    print: =>
      location.href = "distributions/#{@distribution().id}.pdf"

    prev: =>
      @page(@page() - 1)
      @getPaginateData()

    next: =>
      @page(@page() + 1)
      @getPaginateData()

    getPaginateData: =>
      @params['without'] = $.map(@selectedResources(), (r) -> r.id)

      $.getJSON(@url, normalizeHash(ko.mapping.toJS(@params)), (data) =>
        @availableResources(data.objects)
        @per_page(data.per_page)
        @count(data.count)
        @range(@rangeGenerate())

        if data.objects.length == 0 && @page() > 1
          @page(@page() - 1)
          @getPaginateData()
      )

    rangeGenerate: =>
      startRange = if @count() then (@page() - 1)*@per_page() + 1 else 0
      endRange = (@page() - 1)*@per_page() + @per_page()
      endRange = @count() if endRange > @count()
      "#{startRange}-#{endRange}"
